# -*- coding: utf-8 -*-
"""2nd task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IIh9Wf1oSMEeA70t3JrtNb70asqsxZjr
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer

# Load datasets
customers_df = pd.read_csv('Customers.csv')
products_df = pd.read_csv('Products.csv')
transactions_df = pd.read_csv('Transactions.csv')

# Merge datasets
merged_df = transactions_df.merge(customers_df, on='CustomerID', how='left')
merged_df = merged_df.merge(products_df, on='ProductID', how='left')

print("Merged Dataset:")
print(merged_df.head())

# Feature Engineering
# 1. Customer Demographics
customer_features = customers_df[['CustomerID', 'Region', 'SignupDate']]

# 2. Transaction Behavior
transaction_features = merged_df.groupby('CustomerID').agg({
    'TotalValue': ['sum', 'mean'],  # Total spending and average transaction value
    'Category': lambda x: x.mode()[0] if not x.mode().empty else np.nan  # Most frequent product category
}).reset_index()
transaction_features.columns = ['CustomerID', 'TotalSpending', 'AvgTransactionValue', 'FavoriteCategory']

# Merge customer and transaction features
customer_profiles = customer_features.merge(transaction_features, on='CustomerID', how='left')

print("\nCustomer Profiles:")
print(customer_profiles.head())

# Handle missing values in 'FavoriteCategory'
customer_profiles['FavoriteCategory'] = customer_profiles['FavoriteCategory'].fillna('Unknown')

# Handle missing values in numerical features
imputer = SimpleImputer(strategy='mean')  # Replace NaNs with the mean value
customer_profiles[['TotalSpending', 'AvgTransactionValue']] = imputer.fit_transform(
    customer_profiles[['TotalSpending', 'AvgTransactionValue']]
)

print("\nCustomer Profiles After Handling Missing Values:")
print(customer_profiles.head())

# Encode categorical variables
encoder = OneHotEncoder()
encoded_region = encoder.fit_transform(customer_profiles[['Region']]).toarray()
encoded_category = encoder.fit_transform(customer_profiles[['FavoriteCategory']]).toarray()

# Combine encoded features with numerical features
numerical_features = customer_profiles[['TotalSpending', 'AvgTransactionValue']].values
features = np.hstack([encoded_region, encoded_category, numerical_features])

print("\nEncoded Features:")
print(features[:5])  # Print first 5 rows of encoded features

# Normalize numerical features
scaler = StandardScaler()
features[:, -2:] = scaler.fit_transform(features[:, -2:])

print("\nNormalized Features:")
print(features[:5])  # Print first 5 rows of normalized features

# Calculate similarity scores using Cosine Similarity
similarity_matrix = cosine_similarity(features)

print("\nSimilarity Matrix:")
print(similarity_matrix[:5, :5])  # Print a 5x5 subset of the similarity matrix

# Create a dictionary to store lookalikes
lookalike_map = {}

# Get top 3 lookalikes for each customer (C0001 - C0020)
for i, customer_id in enumerate(customer_profiles['CustomerID'][:20]):
    similarity_scores = similarity_matrix[i]
    top_3_indices = np.argsort(similarity_scores)[-4:-1]  # Exclude self (highest similarity)
    top_3_customers = customer_profiles.iloc[top_3_indices]['CustomerID'].tolist()
    top_3_scores = similarity_scores[top_3_indices].tolist()
    lookalike_map[customer_id] = list(zip(top_3_customers, top_3_scores))

# Save results to Lookalike.csv
lookalike_df = pd.DataFrame(lookalike_map.items(), columns=['CustomerID', 'Lookalikes'])
lookalike_df.to_csv('Lookalike.csv', index=False)

print("\nLookalike Recommendations:")
print(lookalike_df.head())

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx
# Visualizations

# 1. Heatmap of Similarity Matrix
plt.figure(figsize=(10, 8))
sns.heatmap(similarity_matrix[:20, :20], annot=True, cmap='coolwarm', xticklabels=customer_profiles['CustomerID'][:20], yticklabels=customer_profiles['CustomerID'][:20])
plt.title('Customer Similarity Heatmap (Top 20 Customers)')
plt.xlabel('Customer ID')
plt.ylabel('Customer ID')
plt.show()

# 2. Network Graph of Lookalikes
G = nx.Graph()

# Add nodes and edges for the top 20 customers and their lookalikes
for customer_id, lookalikes in lookalike_map.items():
    G.add_node(customer_id)
    for lookalike, score in lookalikes:
        G.add_edge(customer_id, lookalike, weight=score)

# Draw the graph
plt.figure(figsize=(12, 10))
pos = nx.spring_layout(G, seed=42)  # Layout for consistent visualization
nx.draw_networkx_nodes(G, pos, node_size=500, node_color='lightblue')
nx.draw_networkx_edges(G, pos, edge_color='gray', width=1.5, alpha=0.6)
nx.draw_networkx_labels(G, pos, font_size=10, font_weight='bold')
plt.title('Customer Lookalike Network Graph (Top 20 Customers)')
plt.show()